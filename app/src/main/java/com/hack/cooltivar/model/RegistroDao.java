package com.hack.cooltivar.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hack.cooltivar.model.Registro;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REGISTRO".
*/
public class RegistroDao extends AbstractDao<Registro, Long> {

    public static final String TABLENAME = "REGISTRO";

    /**
     * Properties of entity Registro.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TipoCultivo = new Property(1, String.class, "tipoCultivo", false, "TIPO_CULTIVO");
        public final static Property Fecha = new Property(2, String.class, "fecha", false, "FECHA");
        public final static Property Hora = new Property(3, String.class, "hora", false, "HORA");
        public final static Property Temperatura = new Property(4, String.class, "temperatura", false, "TEMPERATURA");
    };


    public RegistroDao(DaoConfig config) {
        super(config);
    }
    
    public RegistroDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REGISTRO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TIPO_CULTIVO\" TEXT," + // 1: tipoCultivo
                "\"FECHA\" TEXT," + // 2: fecha
                "\"HORA\" TEXT," + // 3: hora
                "\"TEMPERATURA\" TEXT);"); // 4: temperatura
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REGISTRO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Registro entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tipoCultivo = entity.getTipoCultivo();
        if (tipoCultivo != null) {
            stmt.bindString(2, tipoCultivo);
        }
 
        String fecha = entity.getFecha();
        if (fecha != null) {
            stmt.bindString(3, fecha);
        }
 
        String hora = entity.getHora();
        if (hora != null) {
            stmt.bindString(4, hora);
        }
 
        String temperatura = entity.getTemperatura();
        if (temperatura != null) {
            stmt.bindString(5, temperatura);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Registro readEntity(Cursor cursor, int offset) {
        Registro entity = new Registro( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tipoCultivo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fecha
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // hora
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // temperatura
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Registro entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTipoCultivo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFecha(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHora(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTemperatura(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Registro entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Registro entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
